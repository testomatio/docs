---
import Default from '@astrojs/starlight/components/Head.astro';
import { ViewTransitions } from "astro:transitions";
import docsearch from 'meilisearch-docsearch';

---

<ViewTransitions />
<Default {...Astro.props}><slot /></Default>

<div id="docsearch"></div>


<script is:inline>

  docsearch({
    container: "#docsearch",
    host: "YOUR_HOST_URL",
    apiKey: "YOUR_SEARCH_API_KEY",
    indexUid: "YOUR_INDEX_UID",
  });
</script>

<script is:inline>
  // @ts-check
  
  document.addEventListener('DOMContentLoaded', () => {
  
  const key = 'toc-position';
  
  let timeout = 0;
  
  /** @type {{ scrollTop: number, details: boolean[] }} */
  let position = { scrollTop: 0, details: [] };

  const sidebar = document.querySelector('#starlight__sidebar');
  
  if (!sidebar) return;

  console.log('sidebar', sidebar);

  const details = Array.from(sidebar.querySelectorAll('details'));

    const Restore = (data) => {
      if (!data) return;

      
      try {
        const obj = JSON.parse(data);
        position = {
          ...position, ...obj,
        };
        
        const sidebar = document.querySelector('#starlight__sidebar');
        if (!sidebar) return;

        console.log('Restore scroll', position, sidebar);
        
        const details = Array.from(sidebar.querySelectorAll('details'));
        position.details = details.map(detail => detail.hasAttribute('open'));

        sidebar.scrollTop = position.scrollTop || 0;


        const pathname = document.location.pathname;
        const query = `[href="${pathname}/"]`;
  
        let target = undefined;
  
        for (const [index, entry] of obj.details.entries() || []) {
  
          const q = details[index].querySelector(query);
          if (q) {
            target = q;
          }
  
          if (entry || !!q) {
            details[index].setAttribute('open', 'true');
            if (q) {
              q.setAttribute('aria-current', 'page');
              q.scrollIntoView();
            }
          }
          else {
            details[index].removeAttribute('open');
          }
        }


        // if (target) {
        //   target.scrollIntoView({behavior: 'smooth'});
        // }
        // else {
          sidebar.scrollTop = position.scrollTop || 0;
        // }
  
      }
      catch (err) {
        console.error(err);
      }
    }
  
    const Store = () => {
      if (timeout) {
        window.clearTimeout(timeout);
      }
      const sidebar = document.querySelector('#starlight__sidebar');
      if (!sidebar) return;        
      timeout = window.setTimeout(() => {
        position.scrollTop = sidebar.scrollTop;
        position.details = details.map(detail => detail.hasAttribute('open'));
        console.log('Store scroll', position);
        sessionStorage.setItem(key, JSON.stringify(position));
        timeout = 0;
      }, 50);
    };

    
    // Restore(sessionStorage.getItem(key));

    document.addEventListener('astro:page-load', () => {
      Restore(sessionStorage.getItem(key));
    });

    document.addEventListener('astro:before-preparation', Store);

    sidebar.addEventListener('scroll', Store);

    details.forEach((detail) => {
      detail.addEventListener('toggle', Store);
    });


  

  
  });
  </script>
  